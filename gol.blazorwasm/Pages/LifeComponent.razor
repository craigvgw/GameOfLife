@using gol.blazorwasm.Models
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json;

@inject IJSRuntime _jsRuntime;

@code
{
    private Life? _life;
    private int _smallerDimension;
    private int _edgeAndSpacing;
    private double _edgeLength;
    private double _spacing;

    [Parameter]
    public int Columns { get; set; }

    [Parameter]
    public int Rows { get; set; }

    [Parameter]
    public int PixelWidth { get; set; }

    [Parameter]
    public int PixelHeight { get; set; }

    protected override void OnParametersSet()
    {
        InitData();
    }

    private void InitData()
    {
        _life = new Life(Rows, Columns, cells => { });

    // Glider
        _life.Toggle(2, 2);
        _life.Toggle(3, 2);
        _life.Toggle(4, 2);
        _life.Toggle(4, 1);
        _life.Toggle(3, 0);

        _smallerDimension = Math.Min(PixelWidth, PixelHeight);
        _edgeAndSpacing = _smallerDimension / Columns;
        _edgeLength = _edgeAndSpacing * 0.9;
        _spacing = _edgeAndSpacing * 0.1;
    }

    private void InitData(Cell[][] cells)
    {
        _life = new Life(cells, cells => { });

        _smallerDimension = Math.Min(PixelWidth, PixelHeight);
        _edgeAndSpacing = _smallerDimension / Columns;
        _edgeLength = _edgeAndSpacing * 0.9;
        _spacing = _edgeAndSpacing * 0.1;
    }

    private void OnCellClick(int row, int col)
    {
        _life?.Toggle(row, col);
        StateHasChanged();
    }

    private void OnTickClicked()
    {
        _life?.Tick();
    }

    private void OnClear()
    {
        InitData();
        StateHasChanged();
    }

    private async Task OnDownload()
    {
        var cellsJsonStr = JsonSerializer.Serialize(_life?.Cells);
        var fileName = $"game state {DateTime.Now.ToShortDateString()} {DateTime.Now.ToShortTimeString()}.json";
        await _jsRuntime.InvokeAsync<bool>("downloadStringAsFile", cellsJsonStr, fileName);
    }

    private async Task OnSelectedFileChanged(InputFileChangeEventArgs eventArgs)
    {
        if (!eventArgs.File.Name.EndsWith(".json"))
        {
            Console.WriteLine("Stick to JSON files");
            return;
        }

        using var fileStream = eventArgs.File.OpenReadStream();
        var deserializedCells = await JsonSerializer.DeserializeAsync<Cell[][]>(fileStream);
        if (deserializedCells == null)
        {
            Console.WriteLine("Couldn't deserialize the cells. So sad.");
        }

        if (deserializedCells.Length != Rows || deserializedCells[0].Length != Columns)
        {
            Console.WriteLine($"Expected to load cells with {Rows} rows and {Columns} columns");
            return;
        }
        InitData(deserializedCells);
        StateHasChanged();
    }
}

@if (_life != null)
{
    <div style="display: grid;
                grid-template-columns: repeat(@(Columns), 1fr);
                grid-template-rows: repeat(@(Rows), 1fr);
                column-gap: @($"{_spacing}px");
                row-gap: @($"{_spacing}px");
                background-color: white;
                width: @($"{_smallerDimension}px");
                height: @($"{_smallerDimension}px")">
        @for (int row = 0; row < Rows; row++)
        {
            @for (var col = 0; col < Columns; col++)
            {
                var currentCell = _life.Cells[row][col];
                var cellColor = currentCell.CurrentState switch
                {
                    CellState.Alive => "red",
                    CellState.Dead => "black",
                    _ => "fuchsia"
                    };
                var capturedRow = row;
                var capturedCol = col;
                <div style="height:@($"{_edgeLength}px");
                     width:@($"{_edgeLength}px");
                     background-color: @cellColor;"
                     @onclick=@(e => OnCellClick(capturedRow, capturedCol))>
                </div>
            }
        }

    </div>
    <button @onclick=@(e => OnClear()) class="btn btn-primary">Clear</button>
    <button @onclick=@(e => OnTickClicked()) class="btn btn-primary">Tick</button>
    <button @onclick=@OnDownload class="btn btn-primary">Save</button>
    <InputFile OnChange="@OnSelectedFileChanged" class="btn"></InputFile>
}
else
{
    <div>no life</div>
}